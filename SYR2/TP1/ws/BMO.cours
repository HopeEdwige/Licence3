BMO

Collaborations  => Répondent à ces questions:
	- Quel est l'objectif?
	- Quels sont les objets?
	- GFY ...


Diagrammes dynamiques:
	- Pour chaque CU:
		- Un scénario nominal (basique)
		- Quelques scénarions exceptionnels (cas spécifiques)
	- Alternativement (Catalysis)
		- Description par pre/post de l'état du système avant/après chaque occurrence d'évènement


Diagrammes d'états:
	- Généralisation des scénarios
	- Description systématique des réactions d'un objet aux changements de son environnement
	- Réagis à des stimulis externes ou à ses propres actions (transitions déclenchées)
	- Réseau d'états-transitions
		- Automates étendus
		- Essentiellement des Diagrammes de Harel (idem OMT)
	- Conclusion
		- Format
			évènement (arguments) [conditions] / action ^évènements provoqués


Conseils pratiques:
	- "Un bon modèle n'est pas un modèle où l'on ne peut plus rien ajouter, mais un modèle où on ne peut plus rien." A. St-Exupéry
	- CU:
		- Environ 6 cas
		- Nommer correctement les acteurs et les cas
		- Présence d'un petit texte explicatif pour chaque cas
	- D. de classes:
		- Nommage correct des classes et des liens
		- Définitions présentes dans le dico (pas de termes techniques)
		- Présence des cardinalités!
		- Attributs seulement de type simples
		- Pas de duplication d'attributs ou de relations, si présence, utiliser l'héritage
	- D. de séquence:
		- Attachés à un CU
		- Pour chaque CU, un cas nominal et des cas spécifiques


##############################################################################################################
Conception systémique:
	- Org en sous sys
	- Choix de l'implantation du monde de controle du logiciel
	- Conception de la concurrence
	- Allocation des sous-sys aux tâches et processeurs


Organisation et accès aux données:
	- Hypothèse => Elles sont toujours accessibles
	- BDD avantages
		- Prévues pour de grandes quantités de données
		- Standardisé (SQL)
		- Crash recovery, partage, distribution, intégrité
	- Inconvénients
		- Surcoût en performances
		- Difficiles à manipuler si traitements complexes
		- Interface médiocre avec les langages de prog


##############################################################################################################
Pattern command.

Pattern state:
	- Une sous-classe par sous-état
	- Hiérarchie d'états correspondant à la hiérarchie de classes
	- On fait des héritages par états


Concevoir les associations:
	- Sens de traversée des asso°
	- A sens unique
		- Si vers 1 => Attribut (référence)
		- Si vers * => Liste ou Map
	- Bidirectionnel
		- Sens peu fréquent => Attribut (référence) + recherche dans l'autre sens
		- Si maj peu fréquentes => Attribut dans les 2 sens, mais structure complexe à mettre à jour
		- Sinon, un objet modlisant cette relation (vu souvent en bdd)


Principes de conception objet:
	- Single Responsibility Principle (SRP)
		Une classe par concept et un concept par classe
	- Open/Closed Principle (OCP)
		Ouvert aux extensions par héritage mais stable vs client
	- Liskov Substitutin Principle (LSP)
		Design by Contract: Une sous-classe doit toujours être substituable à ses super-classes
		Notion d'héritage, une sous-classe implémente tout ce que ses super-classes font/ont
	- Dependency Inversion Principle (DIP)
		